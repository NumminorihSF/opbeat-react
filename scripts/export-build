#!/bin/bash

if [ $# -lt 3 ];
then
    echo "Usage: $0 <integration_key> <export_repository_path> <file_to_export> [file_to_export ...]"
    exit
fi

FILES_TO_COPY=""
for ((i=3; i <= $#; i++)) do FILES_TO_COPY="$FILES_TO_COPY ${!i}"; done

BASE_WORKING_DIR=`pwd`
# DISTRIBUTION_DIR="./dist/"
TARGET_REPO_DIR="$2"
INTEGRATION_KEY="$1"
DISTRIBUTION_VERSION=`node -e "console.log(require('./release/integrations.json')['$INTEGRATION_KEY'].version);"`
TAG_NAME="v$DISTRIBUTION_VERSION"

echo "Building files for copy."
gulp build:release
echo " "

if [[ ! -d $TARGET_REPO_DIR || ! -d $TARGET_REPO_DIR'/.git/' ]]
then
    echo "Directory '$TARGET_REPO_DIR' does not exist or is not a git repository. Aborting."
    exit
fi

echo "Checking status of git repository."
cd $TARGET_REPO_DIR
TARGET_REPO_DIR_ABS=`pwd`

git diff-index --quiet HEAD
GITSTATUS=$?
if [ $GITSTATUS -ne 0 ];
then
    echo -e "The git working copy has uncommitted changes. Aborting.";
    exit
fi

if git tag | grep -q $TAG_NAME
then
    echo "The package repository already contains a tag for the current version. Aborting."
    exit
fi

if [[ `git rev-parse --abbrev-ref HEAD` != "master" ]]
then
    git checkout master
    
    git remote update

    if [[ `git rev-parse HEAD` != `git rev-parse origin/master` ]]
    then 
        git pull --ff-only
        GITSTATUS=$?

        if [ $GITSTATUS -ne 0 ]
        then 
            echo "Non-fast forward state between local branch and origin. Resolve and try again."
            exit
        fi
    fi
fi
echo " "

echo "Copying files."
cd $BASE_WORKING_DIR
echo $FILES_TO_COPY | xargs -J % -n 1 cp -v % $TARGET_REPO_DIR_ABS
echo " "

echo "Gzipping minified files."
cd $TARGET_REPO_DIR
find *.min.js | xargs gzip --best --force -v -k -S .gzip
echo " "

echo "Status in $TARGET_REPO_DIR:"
git status -s
read -r -p "Are these changes OK? [y/N] " RESPONSE
echo " "
if [[ $RESPONSE =~ ^([yY][eE][sS]|[yY])$ ]]
then
    git add -A
    git commit -am "Export of $TAG_NAME"
    git tag "$TAG_NAME"
    git push origin master
    git push origin tag "$TAG_NAME"
    echo -e "\nAll done. ($TAG_NAME)"
else
    git checkout -- .
    echo -e "\nCanceled."
fi


